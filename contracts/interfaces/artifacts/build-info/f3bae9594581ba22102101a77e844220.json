{
	"id": "f3bae9594581ba22102101a77e844220",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/interfaces/IERC4626.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.4.22 <0.9.0;\n\nimport { IERC20 } from \"../../modules/erc20/contracts/interfaces/IERC20.sol\";\n\n/// @title A standard for tokenized Vaults with a single underlying ERC-20 token.\ninterface IERC4626 is IERC20 {\n\n    /**************/\n    /*** Events ***/\n    /**************/\n\n    /**\n     *  @dev   `caller_` has exchanged `assets_` for `shares_` and transferred them to `owner_`.\n     *         MUST be emitted when assets are deposited via the `deposit` or `mint` methods.\n     *  @param caller_ The caller of the function that emitted the `Deposit` event.\n     *  @param owner_  The owner of the shares.\n     *  @param assets_ The amount of assets deposited.\n     *  @param shares_ The amount of shares minted.\n     */\n    event Deposit(address indexed caller_, address indexed owner_, uint256 assets_, uint256 shares_);\n\n    /**\n     *  @dev   `caller_` has exchanged `shares_`, owned by `owner_`, for `assets_`, and transferred them to `receiver_`.\n     *         MUST be emitted when assets are withdrawn via the `withdraw` or `redeem` methods.\n     *  @param caller_   The caller of the function that emitted the `Withdraw` event.\n     *  @param receiver_ The receiver of the assets.\n     *  @param owner_    The owner of the shares.\n     *  @param assets_   The amount of assets withdrawn.\n     *  @param shares_   The amount of shares burned.\n     */\n    event Withdraw(address indexed caller_, address indexed receiver_, address indexed owner_, uint256 assets_, uint256 shares_);\n\n    /***********************/\n    /*** State Variables ***/\n    /***********************/\n\n    /**\n     *  @dev    The address of the underlying asset used by the Vault.\n     *          MUST be a contract that implements the ERC-20 standard.\n     *          MUST NOT revert.\n     *  @return asset_ The address of the underlying asset.\n     */\n    function asset() external view returns (address asset_);\n\n    /********************************/\n    /*** State Changing Functions ***/\n    /********************************/\n\n    /**\n     *  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.\n     *          MUST emit the {Deposit} event.\n     *          MUST revert if all of the assets cannot be deposited (due to insufficient approval, deposit limits, slippage, etc).\n     *  @param  assets_   The amount of assets to deposit.\n     *  @param  receiver_ The receiver of the shares.\n     *  @return shares_   The amount of shares minted.\n     */\n    function deposit(uint256 assets_, address receiver_) external returns (uint256 shares_);\n\n    /**\n     *  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.\n     *          MUST emit the {Deposit} event.\n     *          MUST revert if all of shares cannot be minted (due to insufficient approval, deposit limits, slippage, etc).\n     *  @param  shares_   The amount of shares to mint.\n     *  @param  receiver_ The receiver of the shares.\n     *  @return assets_   The amount of assets deposited.\n     */\n    function mint(uint256 shares_, address receiver_) external returns (uint256 assets_);\n\n    /**\n     *  @dev    Burns `shares_` from `owner_` and sends `assets_` to `receiver_`.\n     *          MUST emit the {Withdraw} event.\n     *          MUST revert if all of the shares cannot be redeemed (due to insufficient shares, withdrawal limits, slippage, etc).\n     *  @param  shares_   The amount of shares to redeem.\n     *  @param  receiver_ The receiver of the assets.\n     *  @param  owner_    The owner of the shares.\n     *  @return assets_   The amount of assets sent to the receiver.\n     */\n    function redeem(uint256 shares_, address receiver_, address owner_) external returns (uint256 assets_);\n\n    /**\n     *  @dev    Burns `shares_` from `owner_` and sends `assets_` to `receiver_`.\n     *          MUST emit the {Withdraw} event.\n     *          MUST revert if all of the assets cannot be withdrawn (due to insufficient assets, withdrawal limits, slippage, etc).\n     *  @param  assets_   The amount of assets to withdraw.\n     *  @param  receiver_ The receiver of the assets.\n     *  @param  owner_    The owner of the assets.\n     *  @return shares_   The amount of shares burned from the owner.\n     */\n    function withdraw(uint256 assets_, address receiver_, address owner_) external returns (uint256 shares_);\n\n    /**********************/\n    /*** View Functions ***/\n    /**********************/\n\n    /**\n     *  @dev    The amount of `assets_` the `shares_` are currently equivalent to.\n     *          MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     *          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.\n     *          MUST NOT show any variations depending on the caller.\n     *          MUST NOT revert.\n     *  @param  shares_ The amount of shares to convert.\n     *  @return assets_ The amount of equivalent assets.\n     */\n    function convertToAssets(uint256 shares_) external view returns (uint256 assets_);\n\n    /**\n     *  @dev    The amount of `shares_` the `assets_` are currently equivalent to.\n     *          MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     *          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.\n     *          MUST NOT show any variations depending on the caller.\n     *          MUST NOT revert.\n     *  @param  assets_ The amount of assets to convert.\n     *  @return shares_ The amount of equivalent shares.\n     */\n    function convertToShares(uint256 assets_) external view returns (uint256 shares_);\n\n    /**\n     *  @dev    Maximum amount of `assets_` that can be deposited on behalf of the `receiver_` through a `deposit` call.\n     *          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.\n     *          MUST NOT revert.\n     *  @param  receiver_ The receiver of the assets.\n     *  @return assets_   The maximum amount of assets that can be deposited.\n     */\n    function maxDeposit(address receiver_) external view returns (uint256 assets_);\n\n    /**\n     *  @dev    Maximum amount of `shares_` that can be minted on behalf of the `receiver_` through a `mint` call.\n     *          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.\n     *          MUST NOT revert.\n     *  @param  receiver_ The receiver of the shares.\n     *  @return shares_   The maximum amount of shares that can be minted.\n     */\n    function maxMint(address receiver_) external view returns (uint256 shares_);\n\n    /**\n     *  @dev    Maximum amount of `shares_` that can be redeemed from the `owner_` through a `redeem` call.\n     *          MUST return a limited value if the owner is subject to any limits, or the total amount of owned shares otherwise.\n     *          MUST NOT revert.\n     *  @param  owner_  The owner of the shares.\n     *  @return shares_ The maximum amount of shares that can be redeemed.\n     */\n    function maxRedeem(address owner_) external view returns (uint256 shares_);\n\n    /**\n     *  @dev    Maximum amount of `assets_` that can be withdrawn from the `owner_` through a `withdraw` call.\n     *          MUST return a limited value if the owner is subject to any limits, or the total amount of owned assets otherwise.\n     *          MUST NOT revert.\n     *  @param  owner_  The owner of the assets.\n     *  @return assets_ The maximum amount of assets that can be withdrawn.\n     */\n    function maxWithdraw(address owner_) external view returns (uint256 assets_);\n\n    /**\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.\n     *          MUST return as close to and no more than the exact amount of shares that would be minted in a `deposit` call in the same transaction.\n     *          MUST NOT account for deposit limits like those returned from `maxDeposit` and should always act as though the deposit would be accepted.\n     *          MUST NOT revert.\n     *  @param  assets_ The amount of assets to deposit.\n     *  @return shares_ The amount of shares that would be minted.\n     */\n    function previewDeposit(uint256 assets_) external view returns (uint256 shares_);\n\n    /**\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions.\n     *          MUST return as close to and no fewer than the exact amount of assets that would be deposited in a `mint` call in the same transaction.\n     *          MUST NOT account for mint limits like those returned from `maxMint` and should always act as though the minting would be accepted.\n     *          MUST NOT revert.\n     *  @param  shares_ The amount of shares to mint.\n     *  @return assets_ The amount of assets that would be deposited.\n     */\n    function previewMint(uint256 shares_) external view returns (uint256 assets_);\n\n    /**\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block, given current on-chain conditions.\n     *          MUST return as close to and no more than the exact amount of assets that would be withdrawn in a `redeem` call in the same transaction.\n     *          MUST NOT account for redemption limits like those returned from `maxRedeem` and should always act as though the redemption would be accepted.\n     *          MUST NOT revert.\n     *  @param  shares_ The amount of shares to redeem.\n     *  @return assets_ The amount of assets that would be withdrawn.\n     */\n    function previewRedeem(uint256 shares_) external view returns (uint256 assets_);\n\n    /**\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions.\n     *          MUST return as close to and no fewer than the exact amount of shares that would be burned in a `withdraw` call in the same transaction.\n     *          MUST NOT account for withdrawal limits like those returned from `maxWithdraw` and should always act as though the withdrawal would be accepted.\n     *          MUST NOT revert.\n     *  @param  assets_ The amount of assets to withdraw.\n     *  @return shares_ The amount of shares that would be redeemed.\n     */\n    function previewWithdraw(uint256 assets_) external view returns (uint256 shares_);\n\n    /**\n     *  @dev    Total amount of the underlying asset that is managed by the Vault.\n     *          SHOULD include compounding that occurs from any yields.\n     *          MUST NOT revert.\n     *  @return totalAssets_ The total amount of assets the Vault manages.\n     */\n    function totalAssets() external view returns (uint256 totalAssets_);\n\n}\n"
			},
			"modules/erc20/contracts/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.4.22 <0.9.0;\n\n/// @title Interface of the ERC20 standard as defined in the EIP, including EIP-2612 permit functionality.\ninterface IERC20 {\n\n    /**************/\n    /*** Events ***/\n    /**************/\n\n    /**\n     *  @dev   Emitted when one account has set the allowance of another account over their tokens.\n     *  @param owner_   Account that tokens are approved from.\n     *  @param spender_ Account that tokens are approved for.\n     *  @param amount_  Amount of tokens that have been approved.\n     */\n    event Approval(address indexed owner_, address indexed spender_, uint256 amount_);\n\n    /**\n     *  @dev   Emitted when tokens have moved from one account to another.\n     *  @param owner_     Account that tokens have moved from.\n     *  @param recipient_ Account that tokens have moved to.\n     *  @param amount_    Amount of tokens that have been transferred.\n     */\n    event Transfer(address indexed owner_, address indexed recipient_, uint256 amount_);\n\n    /**************************/\n    /*** External Functions ***/\n    /**************************/\n\n    /**\n     *  @dev    Function that allows one account to set the allowance of another account over their tokens.\n     *          Emits an {Approval} event.\n     *  @param  spender_ Account that tokens are approved for.\n     *  @param  amount_  Amount of tokens that have been approved.\n     *  @return success_ Boolean indicating whether the operation succeeded.\n     */\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\n\n    /**\n     *  @dev    Function that allows one account to decrease the allowance of another account over their tokens.\n     *          Emits an {Approval} event.\n     *  @param  spender_          Account that tokens are approved for.\n     *  @param  subtractedAmount_ Amount to decrease approval by.\n     *  @return success_          Boolean indicating whether the operation succeeded.\n     */\n    function decreaseAllowance(address spender_, uint256 subtractedAmount_) external returns (bool success_);\n\n    /**\n     *  @dev    Function that allows one account to increase the allowance of another account over their tokens.\n     *          Emits an {Approval} event.\n     *  @param  spender_     Account that tokens are approved for.\n     *  @param  addedAmount_ Amount to increase approval by.\n     *  @return success_     Boolean indicating whether the operation succeeded.\n     */\n    function increaseAllowance(address spender_, uint256 addedAmount_) external returns (bool success_);\n\n    /**\n     *  @dev   Approve by signature.\n     *  @param owner_    Owner address that signed the permit.\n     *  @param spender_  Spender of the permit.\n     *  @param amount_   Permit approval spend limit.\n     *  @param deadline_ Deadline after which the permit is invalid.\n     *  @param v_        ECDSA signature v component.\n     *  @param r_        ECDSA signature r component.\n     *  @param s_        ECDSA signature s component.\n     */\n    function permit(address owner_, address spender_, uint amount_, uint deadline_, uint8 v_, bytes32 r_, bytes32 s_) external;\n\n    /**\n     *  @dev    Moves an amount of tokens from `msg.sender` to a specified account.\n     *          Emits a {Transfer} event.\n     *  @param  recipient_ Account that receives tokens.\n     *  @param  amount_    Amount of tokens that are transferred.\n     *  @return success_   Boolean indicating whether the operation succeeded.\n     */\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\n\n    /**\n     *  @dev    Moves a pre-approved amount of tokens from a sender to a specified account.\n     *          Emits a {Transfer} event.\n     *          Emits an {Approval} event.\n     *  @param  owner_     Account that tokens are moving from.\n     *  @param  recipient_ Account that receives tokens.\n     *  @param  amount_    Amount of tokens that are transferred.\n     *  @return success_   Boolean indicating whether the operation succeeded.\n     */\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\n\n    /**********************/\n    /*** View Functions ***/\n    /**********************/\n\n    /**\n     *  @dev    Returns the allowance that one account has given another over their tokens.\n     *  @param  owner_     Account that tokens are approved from.\n     *  @param  spender_   Account that tokens are approved for.\n     *  @return allowance_ Allowance that one account has given another over their tokens.\n     */\n    function allowance(address owner_, address spender_) external view returns (uint256 allowance_);\n\n    /**\n     *  @dev    Returns the amount of tokens owned by a given account.\n     *  @param  account_ Account that owns the tokens.\n     *  @return balance_ Amount of tokens owned by a given account.\n     */\n    function balanceOf(address account_) external view returns (uint256 balance_);\n\n    /**\n     *  @dev    Returns the decimal precision used by the token.\n     *  @return decimals_ The decimal precision used by the token.\n     */\n    function decimals() external view returns (uint8 decimals_);\n\n    /**\n     *  @dev    Returns the signature domain separator.\n     *  @return domainSeparator_ The signature domain separator.\n     */\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator_);\n\n    /**\n     *  @dev    Returns the name of the token.\n     *  @return name_ The name of the token.\n     */\n    function name() external view returns (string memory name_);\n\n    /**\n      *  @dev    Returns the nonce for the given owner.\n      *  @param  owner_  The address of the owner account.\n      *  @return nonce_ The nonce for the given owner.\n     */\n    function nonces(address owner_) external view returns (uint256 nonce_);\n\n    /**\n     *  @dev    Returns the permit type hash.\n     *  @return permitTypehash_ The permit type hash.\n     */\n    function PERMIT_TYPEHASH() external view returns (bytes32 permitTypehash_);\n\n    /**\n     *  @dev    Returns the symbol of the token.\n     *  @return symbol_ The symbol of the token.\n     */\n    function symbol() external view returns (string memory symbol_);\n\n    /**\n     *  @dev    Returns the total amount of tokens in existence.\n     *  @return totalSupply_ The total amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256 totalSupply_);\n\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/interfaces/IERC4626.sol": {
				"IERC4626": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender_",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "caller_",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient_",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "caller_",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver_",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "domainSeparator_",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "permitTypehash_",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender_",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "allowance_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success_",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "asset_",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account_",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "decimals_",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedAmount_",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success_",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver_",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedAmount_",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success_",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver_",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver_",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver_",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "nonce_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline_",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v_",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r_",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s_",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver_",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "totalAssets_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "totalSupply_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success_",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success_",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets_",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver_",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares_",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Deposit(address,address,uint256,uint256)": {
								"details": "`caller_` has exchanged `assets_` for `shares_` and transferred them to `owner_`.         MUST be emitted when assets are deposited via the `deposit` or `mint` methods.",
								"params": {
									"assets_": "The amount of assets deposited.",
									"caller_": "The caller of the function that emitted the `Deposit` event.",
									"owner_": "The owner of the shares.",
									"shares_": "The amount of shares minted."
								}
							},
							"Withdraw(address,address,address,uint256,uint256)": {
								"details": "`caller_` has exchanged `shares_`, owned by `owner_`, for `assets_`, and transferred them to `receiver_`.         MUST be emitted when assets are withdrawn via the `withdraw` or `redeem` methods.",
								"params": {
									"assets_": "The amount of assets withdrawn.",
									"caller_": "The caller of the function that emitted the `Withdraw` event.",
									"owner_": "The owner of the shares.",
									"receiver_": "The receiver of the assets.",
									"shares_": "The amount of shares burned."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the signature domain separator.",
								"returns": {
									"domainSeparator_": "The signature domain separator."
								}
							},
							"PERMIT_TYPEHASH()": {
								"details": "Returns the permit type hash.",
								"returns": {
									"permitTypehash_": "The permit type hash."
								}
							},
							"allowance(address,address)": {
								"details": "Returns the allowance that one account has given another over their tokens.",
								"params": {
									"owner_": "Account that tokens are approved from.",
									"spender_": "Account that tokens are approved for."
								},
								"returns": {
									"allowance_": "Allowance that one account has given another over their tokens."
								}
							},
							"approve(address,uint256)": {
								"details": "Function that allows one account to set the allowance of another account over their tokens.          Emits an {Approval} event.",
								"params": {
									"amount_": "Amount of tokens that have been approved.",
									"spender_": "Account that tokens are approved for."
								},
								"returns": {
									"success_": "Boolean indicating whether the operation succeeded."
								}
							},
							"asset()": {
								"details": "The address of the underlying asset used by the Vault.          MUST be a contract that implements the ERC-20 standard.          MUST NOT revert.",
								"returns": {
									"asset_": "The address of the underlying asset."
								}
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by a given account.",
								"params": {
									"account_": "Account that owns the tokens."
								},
								"returns": {
									"balance_": "Amount of tokens owned by a given account."
								}
							},
							"convertToAssets(uint256)": {
								"details": "The amount of `assets_` the `shares_` are currently equivalent to.          MUST NOT be inclusive of any fees that are charged against assets in the Vault.          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.          MUST NOT show any variations depending on the caller.          MUST NOT revert.",
								"params": {
									"shares_": "The amount of shares to convert."
								},
								"returns": {
									"assets_": "The amount of equivalent assets."
								}
							},
							"convertToShares(uint256)": {
								"details": "The amount of `shares_` the `assets_` are currently equivalent to.          MUST NOT be inclusive of any fees that are charged against assets in the Vault.          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.          MUST NOT show any variations depending on the caller.          MUST NOT revert.",
								"params": {
									"assets_": "The amount of assets to convert."
								},
								"returns": {
									"shares_": "The amount of equivalent shares."
								}
							},
							"decimals()": {
								"details": "Returns the decimal precision used by the token.",
								"returns": {
									"decimals_": "The decimal precision used by the token."
								}
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Function that allows one account to decrease the allowance of another account over their tokens.          Emits an {Approval} event.",
								"params": {
									"spender_": "Account that tokens are approved for.",
									"subtractedAmount_": "Amount to decrease approval by."
								},
								"returns": {
									"success_": "         Boolean indicating whether the operation succeeded."
								}
							},
							"deposit(uint256,address)": {
								"details": "Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.          MUST emit the {Deposit} event.          MUST revert if all of the assets cannot be deposited (due to insufficient approval, deposit limits, slippage, etc).",
								"params": {
									"assets_": "The amount of assets to deposit.",
									"receiver_": "The receiver of the shares."
								},
								"returns": {
									"shares_": "  The amount of shares minted."
								}
							},
							"increaseAllowance(address,uint256)": {
								"details": "Function that allows one account to increase the allowance of another account over their tokens.          Emits an {Approval} event.",
								"params": {
									"addedAmount_": "Amount to increase approval by.",
									"spender_": "Account that tokens are approved for."
								},
								"returns": {
									"success_": "    Boolean indicating whether the operation succeeded."
								}
							},
							"maxDeposit(address)": {
								"details": "Maximum amount of `assets_` that can be deposited on behalf of the `receiver_` through a `deposit` call.          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.          MUST NOT revert.",
								"params": {
									"receiver_": "The receiver of the assets."
								},
								"returns": {
									"assets_": "  The maximum amount of assets that can be deposited."
								}
							},
							"maxMint(address)": {
								"details": "Maximum amount of `shares_` that can be minted on behalf of the `receiver_` through a `mint` call.          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.          MUST NOT revert.",
								"params": {
									"receiver_": "The receiver of the shares."
								},
								"returns": {
									"shares_": "  The maximum amount of shares that can be minted."
								}
							},
							"maxRedeem(address)": {
								"details": "Maximum amount of `shares_` that can be redeemed from the `owner_` through a `redeem` call.          MUST return a limited value if the owner is subject to any limits, or the total amount of owned shares otherwise.          MUST NOT revert.",
								"params": {
									"owner_": "The owner of the shares."
								},
								"returns": {
									"shares_": "The maximum amount of shares that can be redeemed."
								}
							},
							"maxWithdraw(address)": {
								"details": "Maximum amount of `assets_` that can be withdrawn from the `owner_` through a `withdraw` call.          MUST return a limited value if the owner is subject to any limits, or the total amount of owned assets otherwise.          MUST NOT revert.",
								"params": {
									"owner_": "The owner of the assets."
								},
								"returns": {
									"assets_": "The maximum amount of assets that can be withdrawn."
								}
							},
							"mint(uint256,address)": {
								"details": "Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.          MUST emit the {Deposit} event.          MUST revert if all of shares cannot be minted (due to insufficient approval, deposit limits, slippage, etc).",
								"params": {
									"receiver_": "The receiver of the shares.",
									"shares_": "The amount of shares to mint."
								},
								"returns": {
									"assets_": "  The amount of assets deposited."
								}
							},
							"name()": {
								"details": "Returns the name of the token.",
								"returns": {
									"name_": "The name of the token."
								}
							},
							"nonces(address)": {
								"details": "Returns the nonce for the given owner.",
								"params": {
									"owner_": "The address of the owner account."
								},
								"returns": {
									"nonce_": "The nonce for the given owner."
								}
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Approve by signature.",
								"params": {
									"amount_": "Permit approval spend limit.",
									"deadline_": "Deadline after which the permit is invalid.",
									"owner_": "Owner address that signed the permit.",
									"r_": "ECDSA signature r component.",
									"s_": "ECDSA signature s component.",
									"spender_": "Spender of the permit.",
									"v_": "ECDSA signature v component."
								}
							},
							"previewDeposit(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.          MUST return as close to and no more than the exact amount of shares that would be minted in a `deposit` call in the same transaction.          MUST NOT account for deposit limits like those returned from `maxDeposit` and should always act as though the deposit would be accepted.          MUST NOT revert.",
								"params": {
									"assets_": "The amount of assets to deposit."
								},
								"returns": {
									"shares_": "The amount of shares that would be minted."
								}
							},
							"previewMint(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions.          MUST return as close to and no fewer than the exact amount of assets that would be deposited in a `mint` call in the same transaction.          MUST NOT account for mint limits like those returned from `maxMint` and should always act as though the minting would be accepted.          MUST NOT revert.",
								"params": {
									"shares_": "The amount of shares to mint."
								},
								"returns": {
									"assets_": "The amount of assets that would be deposited."
								}
							},
							"previewRedeem(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block, given current on-chain conditions.          MUST return as close to and no more than the exact amount of assets that would be withdrawn in a `redeem` call in the same transaction.          MUST NOT account for redemption limits like those returned from `maxRedeem` and should always act as though the redemption would be accepted.          MUST NOT revert.",
								"params": {
									"shares_": "The amount of shares to redeem."
								},
								"returns": {
									"assets_": "The amount of assets that would be withdrawn."
								}
							},
							"previewWithdraw(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions.          MUST return as close to and no fewer than the exact amount of shares that would be burned in a `withdraw` call in the same transaction.          MUST NOT account for withdrawal limits like those returned from `maxWithdraw` and should always act as though the withdrawal would be accepted.          MUST NOT revert.",
								"params": {
									"assets_": "The amount of assets to withdraw."
								},
								"returns": {
									"shares_": "The amount of shares that would be redeemed."
								}
							},
							"redeem(uint256,address,address)": {
								"details": "Burns `shares_` from `owner_` and sends `assets_` to `receiver_`.          MUST emit the {Withdraw} event.          MUST revert if all of the shares cannot be redeemed (due to insufficient shares, withdrawal limits, slippage, etc).",
								"params": {
									"owner_": "The owner of the shares.",
									"receiver_": "The receiver of the assets.",
									"shares_": "The amount of shares to redeem."
								},
								"returns": {
									"assets_": "  The amount of assets sent to the receiver."
								}
							},
							"symbol()": {
								"details": "Returns the symbol of the token.",
								"returns": {
									"symbol_": "The symbol of the token."
								}
							},
							"totalAssets()": {
								"details": "Total amount of the underlying asset that is managed by the Vault.          SHOULD include compounding that occurs from any yields.          MUST NOT revert.",
								"returns": {
									"totalAssets_": "The total amount of assets the Vault manages."
								}
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens in existence.",
								"returns": {
									"totalSupply_": "The total amount of tokens in existence."
								}
							},
							"transfer(address,uint256)": {
								"details": "Moves an amount of tokens from `msg.sender` to a specified account.          Emits a {Transfer} event.",
								"params": {
									"amount_": "Amount of tokens that are transferred.",
									"recipient_": "Account that receives tokens."
								},
								"returns": {
									"success_": "  Boolean indicating whether the operation succeeded."
								}
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a pre-approved amount of tokens from a sender to a specified account.          Emits a {Transfer} event.          Emits an {Approval} event.",
								"params": {
									"amount_": "Amount of tokens that are transferred.",
									"owner_": "Account that tokens are moving from.",
									"recipient_": "Account that receives tokens."
								},
								"returns": {
									"success_": "  Boolean indicating whether the operation succeeded."
								}
							},
							"withdraw(uint256,address,address)": {
								"details": "Burns `shares_` from `owner_` and sends `assets_` to `receiver_`.          MUST emit the {Withdraw} event.          MUST revert if all of the assets cannot be withdrawn (due to insufficient assets, withdrawal limits, slippage, etc).",
								"params": {
									"assets_": "The amount of assets to withdraw.",
									"owner_": "The owner of the assets.",
									"receiver_": "The receiver of the assets."
								},
								"returns": {
									"shares_": "  The amount of shares burned from the owner."
								}
							}
						},
						"title": "A standard for tokenized Vaults with a single underlying ERC-20 token.",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"deposit(uint256,address)": "6e553f65",
							"increaseAllowance(address,uint256)": "39509351",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"permitTypehash_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deposit(address,address,uint256,uint256)\":{\"details\":\"`caller_` has exchanged `assets_` for `shares_` and transferred them to `owner_`.         MUST be emitted when assets are deposited via the `deposit` or `mint` methods.\",\"params\":{\"assets_\":\"The amount of assets deposited.\",\"caller_\":\"The caller of the function that emitted the `Deposit` event.\",\"owner_\":\"The owner of the shares.\",\"shares_\":\"The amount of shares minted.\"}},\"Withdraw(address,address,address,uint256,uint256)\":{\"details\":\"`caller_`\\u00a0has exchanged\\u00a0`shares_`, owned by\\u00a0`owner_`, for\\u00a0`assets_`, and transferred them\\u00a0to\\u00a0`receiver_`.         MUST be emitted when assets are withdrawn via the\\u00a0`withdraw`\\u00a0or\\u00a0`redeem`\\u00a0methods.\",\"params\":{\"assets_\":\"The amount of assets withdrawn.\",\"caller_\":\"The caller of the function that emitted the `Withdraw` event.\",\"owner_\":\"The owner of the shares.\",\"receiver_\":\"The receiver of the assets.\",\"shares_\":\"The amount of shares burned.\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the signature domain separator.\",\"returns\":{\"domainSeparator_\":\"The signature domain separator.\"}},\"PERMIT_TYPEHASH()\":{\"details\":\"Returns the permit type hash.\",\"returns\":{\"permitTypehash_\":\"The permit type hash.\"}},\"allowance(address,address)\":{\"details\":\"Returns the allowance that one account has given another over their tokens.\",\"params\":{\"owner_\":\"Account that tokens are approved from.\",\"spender_\":\"Account that tokens are approved for.\"},\"returns\":{\"allowance_\":\"Allowance that one account has given another over their tokens.\"}},\"approve(address,uint256)\":{\"details\":\"Function that allows one account to set the allowance of another account over their tokens.          Emits an {Approval} event.\",\"params\":{\"amount_\":\"Amount of tokens that have been approved.\",\"spender_\":\"Account that tokens are approved for.\"},\"returns\":{\"success_\":\"Boolean indicating whether the operation succeeded.\"}},\"asset()\":{\"details\":\"The address of the underlying asset used by the Vault.          MUST be a contract that implements the ERC-20 standard.          MUST NOT revert.\",\"returns\":{\"asset_\":\"The address of the underlying asset.\"}},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by a given account.\",\"params\":{\"account_\":\"Account that owns the tokens.\"},\"returns\":{\"balance_\":\"Amount of tokens owned by a given account.\"}},\"convertToAssets(uint256)\":{\"details\":\"The amount of `assets_` the `shares_` are currently equivalent to.          MUST NOT be inclusive of any fees that are charged against assets in the Vault.          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.          MUST NOT show any variations depending on the caller.          MUST NOT revert.\",\"params\":{\"shares_\":\"The amount of shares to convert.\"},\"returns\":{\"assets_\":\"The amount of equivalent assets.\"}},\"convertToShares(uint256)\":{\"details\":\"The amount of `shares_` the `assets_` are currently equivalent to.          MUST NOT be inclusive of any fees that are charged against assets in the Vault.          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.          MUST NOT show any variations depending on the caller.          MUST NOT revert.\",\"params\":{\"assets_\":\"The amount of assets to convert.\"},\"returns\":{\"shares_\":\"The amount of equivalent shares.\"}},\"decimals()\":{\"details\":\"Returns the decimal precision used by the token.\",\"returns\":{\"decimals_\":\"The decimal precision used by the token.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Function that allows one account to decrease the allowance of another account over their tokens.          Emits an {Approval} event.\",\"params\":{\"spender_\":\"Account that tokens are approved for.\",\"subtractedAmount_\":\"Amount to decrease approval by.\"},\"returns\":{\"success_\":\"         Boolean indicating whether the operation succeeded.\"}},\"deposit(uint256,address)\":{\"details\":\"Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.          MUST emit the {Deposit} event.          MUST revert if all of the assets cannot be deposited (due to insufficient approval, deposit limits, slippage, etc).\",\"params\":{\"assets_\":\"The amount of assets to deposit.\",\"receiver_\":\"The receiver of the shares.\"},\"returns\":{\"shares_\":\"  The amount of shares minted.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Function that allows one account to increase the allowance of another account over their tokens.          Emits an {Approval} event.\",\"params\":{\"addedAmount_\":\"Amount to increase approval by.\",\"spender_\":\"Account that tokens are approved for.\"},\"returns\":{\"success_\":\"    Boolean indicating whether the operation succeeded.\"}},\"maxDeposit(address)\":{\"details\":\"Maximum amount of `assets_` that can be deposited on behalf of the `receiver_` through a `deposit` call.          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.          MUST NOT revert.\",\"params\":{\"receiver_\":\"The receiver of the assets.\"},\"returns\":{\"assets_\":\"  The maximum amount of assets that can be deposited.\"}},\"maxMint(address)\":{\"details\":\"Maximum amount of `shares_` that can be minted on behalf of the `receiver_` through a `mint` call.          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.          MUST NOT revert.\",\"params\":{\"receiver_\":\"The receiver of the shares.\"},\"returns\":{\"shares_\":\"  The maximum amount of shares that can be minted.\"}},\"maxRedeem(address)\":{\"details\":\"Maximum amount of `shares_` that can be redeemed from the\\u00a0`owner_` through a\\u00a0`redeem`\\u00a0call.          MUST return a limited value if\\u00a0the owner\\u00a0is subject to any limits, or the total amount of owned shares otherwise.          MUST\\u00a0NOT\\u00a0revert.\",\"params\":{\"owner_\":\"The owner of the shares.\"},\"returns\":{\"shares_\":\"The maximum amount of shares that can be redeemed.\"}},\"maxWithdraw(address)\":{\"details\":\"Maximum amount of `assets_` that can be withdrawn from the `owner_` through a `withdraw` call.          MUST return a limited value if the owner is subject to any limits, or the total amount of owned assets otherwise.          MUST NOT revert.\",\"params\":{\"owner_\":\"The owner of the assets.\"},\"returns\":{\"assets_\":\"The maximum amount of assets that can be withdrawn.\"}},\"mint(uint256,address)\":{\"details\":\"Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.          MUST emit the {Deposit} event.          MUST revert if all of shares cannot be minted (due to insufficient approval, deposit limits, slippage, etc).\",\"params\":{\"receiver_\":\"The receiver of the shares.\",\"shares_\":\"The amount of shares to mint.\"},\"returns\":{\"assets_\":\"  The amount of assets deposited.\"}},\"name()\":{\"details\":\"Returns the name of the token.\",\"returns\":{\"name_\":\"The name of the token.\"}},\"nonces(address)\":{\"details\":\"Returns the nonce for the given owner.\",\"params\":{\"owner_\":\"The address of the owner account.\"},\"returns\":{\"nonce_\":\"The nonce for the given owner.\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Approve by signature.\",\"params\":{\"amount_\":\"Permit approval spend limit.\",\"deadline_\":\"Deadline after which the permit is invalid.\",\"owner_\":\"Owner address that signed the permit.\",\"r_\":\"ECDSA signature r component.\",\"s_\":\"ECDSA signature s component.\",\"spender_\":\"Spender of the permit.\",\"v_\":\"ECDSA signature v component.\"}},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.          MUST return as close to and no more than the exact amount of shares that would be minted in a `deposit` call in the same transaction.          MUST NOT account for deposit limits like those returned from `maxDeposit` and should always act as though the deposit would be accepted.          MUST NOT revert.\",\"params\":{\"assets_\":\"The amount of assets to deposit.\"},\"returns\":{\"shares_\":\"The amount of shares that would be minted.\"}},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions.          MUST return as close to and no fewer than the exact amount of assets that would be deposited in a `mint` call in the same transaction.          MUST NOT account for mint limits like those returned from `maxMint` and should always act as though the minting would be accepted.          MUST NOT revert.\",\"params\":{\"shares_\":\"The amount of shares to mint.\"},\"returns\":{\"assets_\":\"The amount of assets that would be deposited.\"}},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block, given current on-chain conditions.          MUST return as close to and no more than the exact amount of assets that would be withdrawn in a\\u00a0`redeem`\\u00a0call in the same transaction.          MUST NOT account for redemption limits like those returned from `maxRedeem` and should always act as though the redemption would be accepted.          MUST NOT revert.\",\"params\":{\"shares_\":\"The amount of shares to redeem.\"},\"returns\":{\"assets_\":\"The amount of assets that would be withdrawn.\"}},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions.          MUST return as close to and no fewer than the exact amount of shares that would be burned in a\\u00a0`withdraw`\\u00a0call in the same transaction.          MUST NOT account for withdrawal limits like those returned from `maxWithdraw` and should always act as though the withdrawal would be accepted.          MUST NOT revert.\",\"params\":{\"assets_\":\"The amount of assets to withdraw.\"},\"returns\":{\"shares_\":\"The amount of shares that would be redeemed.\"}},\"redeem(uint256,address,address)\":{\"details\":\"Burns\\u00a0`shares_`\\u00a0from\\u00a0`owner_`\\u00a0and sends\\u00a0`assets_` to\\u00a0`receiver_`.          MUST emit the\\u00a0{Withdraw}\\u00a0event.          MUST revert if all of\\u00a0the shares\\u00a0cannot be redeemed (due to insufficient shares, withdrawal limits, slippage, etc).\",\"params\":{\"owner_\":\"The owner of the shares.\",\"receiver_\":\"The receiver of the assets.\",\"shares_\":\"The amount of shares to redeem.\"},\"returns\":{\"assets_\":\"  The amount of assets sent to the receiver.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token.\",\"returns\":{\"symbol_\":\"The symbol of the token.\"}},\"totalAssets()\":{\"details\":\"Total amount of the underlying asset that is managed by the Vault.          SHOULD include compounding that occurs from any yields.          MUST NOT revert.\",\"returns\":{\"totalAssets_\":\"The total amount of assets the Vault manages.\"}},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens in existence.\",\"returns\":{\"totalSupply_\":\"The total amount of tokens in existence.\"}},\"transfer(address,uint256)\":{\"details\":\"Moves an amount of tokens from `msg.sender` to a specified account.          Emits a {Transfer} event.\",\"params\":{\"amount_\":\"Amount of tokens that are transferred.\",\"recipient_\":\"Account that receives tokens.\"},\"returns\":{\"success_\":\"  Boolean indicating whether the operation succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a pre-approved amount of tokens from a sender to a specified account.          Emits a {Transfer} event.          Emits an {Approval} event.\",\"params\":{\"amount_\":\"Amount of tokens that are transferred.\",\"owner_\":\"Account that tokens are moving from.\",\"recipient_\":\"Account that receives tokens.\"},\"returns\":{\"success_\":\"  Boolean indicating whether the operation succeeded.\"}},\"withdraw(uint256,address,address)\":{\"details\":\"Burns\\u00a0`shares_`\\u00a0from\\u00a0`owner_`\\u00a0and sends `assets_`\\u00a0to `receiver_`.          MUST emit the\\u00a0{Withdraw}\\u00a0event.          MUST revert if all of\\u00a0the assets\\u00a0cannot be withdrawn (due to insufficient assets, withdrawal limits, slippage, etc).\",\"params\":{\"assets_\":\"The amount of assets to withdraw.\",\"owner_\":\"The owner of the assets.\",\"receiver_\":\"The receiver of the assets.\"},\"returns\":{\"shares_\":\"  The amount of shares burned from the owner.\"}}},\"title\":\"A standard for tokenized Vaults with a single underlying ERC-20 token.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC4626.sol\":\"IERC4626\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0xda8327c5dacee8c853be870f3fc90c67e7351b242ca7317073d83032f034d8ed\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://fac8e65a2c903fe0e5f5b137166535d7908b81978c05457149c6bfbbb10a2120\",\"dweb:/ipfs/QmSzcsy5PvbjNSzi6npx5vSXWwhvne2vZVgYZLmhcBWq4v\"]},\"modules/erc20/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x3467fb0980a24c1a3ea54093029a9321e316ae22e5d70d6bd961fe6c44f15161\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://47d2e51f1b88b432d1372b2c36fc3dcadcc74f9854bcf1b5bf4f52e0f6418c21\",\"dweb:/ipfs/QmVjadyhNCrEiSpZLQwJefPBwtweaFMZCLp9fDS56QprbP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"modules/erc20/contracts/interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender_",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient_",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "domainSeparator_",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "permitTypehash_",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender_",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "allowance_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success_",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account_",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "decimals_",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedAmount_",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success_",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedAmount_",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success_",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "nonce_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline_",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v_",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r_",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s_",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "totalSupply_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success_",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success_",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when one account has set the allowance of another account over their tokens.",
								"params": {
									"amount_": "Amount of tokens that have been approved.",
									"owner_": "Account that tokens are approved from.",
									"spender_": "Account that tokens are approved for."
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when tokens have moved from one account to another.",
								"params": {
									"amount_": "Amount of tokens that have been transferred.",
									"owner_": "Account that tokens have moved from.",
									"recipient_": "Account that tokens have moved to."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the signature domain separator.",
								"returns": {
									"domainSeparator_": "The signature domain separator."
								}
							},
							"PERMIT_TYPEHASH()": {
								"details": "Returns the permit type hash.",
								"returns": {
									"permitTypehash_": "The permit type hash."
								}
							},
							"allowance(address,address)": {
								"details": "Returns the allowance that one account has given another over their tokens.",
								"params": {
									"owner_": "Account that tokens are approved from.",
									"spender_": "Account that tokens are approved for."
								},
								"returns": {
									"allowance_": "Allowance that one account has given another over their tokens."
								}
							},
							"approve(address,uint256)": {
								"details": "Function that allows one account to set the allowance of another account over their tokens.          Emits an {Approval} event.",
								"params": {
									"amount_": "Amount of tokens that have been approved.",
									"spender_": "Account that tokens are approved for."
								},
								"returns": {
									"success_": "Boolean indicating whether the operation succeeded."
								}
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by a given account.",
								"params": {
									"account_": "Account that owns the tokens."
								},
								"returns": {
									"balance_": "Amount of tokens owned by a given account."
								}
							},
							"decimals()": {
								"details": "Returns the decimal precision used by the token.",
								"returns": {
									"decimals_": "The decimal precision used by the token."
								}
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Function that allows one account to decrease the allowance of another account over their tokens.          Emits an {Approval} event.",
								"params": {
									"spender_": "Account that tokens are approved for.",
									"subtractedAmount_": "Amount to decrease approval by."
								},
								"returns": {
									"success_": "         Boolean indicating whether the operation succeeded."
								}
							},
							"increaseAllowance(address,uint256)": {
								"details": "Function that allows one account to increase the allowance of another account over their tokens.          Emits an {Approval} event.",
								"params": {
									"addedAmount_": "Amount to increase approval by.",
									"spender_": "Account that tokens are approved for."
								},
								"returns": {
									"success_": "    Boolean indicating whether the operation succeeded."
								}
							},
							"name()": {
								"details": "Returns the name of the token.",
								"returns": {
									"name_": "The name of the token."
								}
							},
							"nonces(address)": {
								"details": "Returns the nonce for the given owner.",
								"params": {
									"owner_": "The address of the owner account."
								},
								"returns": {
									"nonce_": "The nonce for the given owner."
								}
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Approve by signature.",
								"params": {
									"amount_": "Permit approval spend limit.",
									"deadline_": "Deadline after which the permit is invalid.",
									"owner_": "Owner address that signed the permit.",
									"r_": "ECDSA signature r component.",
									"s_": "ECDSA signature s component.",
									"spender_": "Spender of the permit.",
									"v_": "ECDSA signature v component."
								}
							},
							"symbol()": {
								"details": "Returns the symbol of the token.",
								"returns": {
									"symbol_": "The symbol of the token."
								}
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens in existence.",
								"returns": {
									"totalSupply_": "The total amount of tokens in existence."
								}
							},
							"transfer(address,uint256)": {
								"details": "Moves an amount of tokens from `msg.sender` to a specified account.          Emits a {Transfer} event.",
								"params": {
									"amount_": "Amount of tokens that are transferred.",
									"recipient_": "Account that receives tokens."
								},
								"returns": {
									"success_": "  Boolean indicating whether the operation succeeded."
								}
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a pre-approved amount of tokens from a sender to a specified account.          Emits a {Transfer} event.          Emits an {Approval} event.",
								"params": {
									"amount_": "Amount of tokens that are transferred.",
									"owner_": "Account that tokens are moving from.",
									"recipient_": "Account that receives tokens."
								},
								"returns": {
									"success_": "  Boolean indicating whether the operation succeeded."
								}
							}
						},
						"title": "Interface of the ERC20 standard as defined in the EIP, including EIP-2612 permit functionality.",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"permitTypehash_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when one account has set the allowance of another account over their tokens.\",\"params\":{\"amount_\":\"Amount of tokens that have been approved.\",\"owner_\":\"Account that tokens are approved from.\",\"spender_\":\"Account that tokens are approved for.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when tokens have moved from one account to another.\",\"params\":{\"amount_\":\"Amount of tokens that have been transferred.\",\"owner_\":\"Account that tokens have moved from.\",\"recipient_\":\"Account that tokens have moved to.\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the signature domain separator.\",\"returns\":{\"domainSeparator_\":\"The signature domain separator.\"}},\"PERMIT_TYPEHASH()\":{\"details\":\"Returns the permit type hash.\",\"returns\":{\"permitTypehash_\":\"The permit type hash.\"}},\"allowance(address,address)\":{\"details\":\"Returns the allowance that one account has given another over their tokens.\",\"params\":{\"owner_\":\"Account that tokens are approved from.\",\"spender_\":\"Account that tokens are approved for.\"},\"returns\":{\"allowance_\":\"Allowance that one account has given another over their tokens.\"}},\"approve(address,uint256)\":{\"details\":\"Function that allows one account to set the allowance of another account over their tokens.          Emits an {Approval} event.\",\"params\":{\"amount_\":\"Amount of tokens that have been approved.\",\"spender_\":\"Account that tokens are approved for.\"},\"returns\":{\"success_\":\"Boolean indicating whether the operation succeeded.\"}},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by a given account.\",\"params\":{\"account_\":\"Account that owns the tokens.\"},\"returns\":{\"balance_\":\"Amount of tokens owned by a given account.\"}},\"decimals()\":{\"details\":\"Returns the decimal precision used by the token.\",\"returns\":{\"decimals_\":\"The decimal precision used by the token.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Function that allows one account to decrease the allowance of another account over their tokens.          Emits an {Approval} event.\",\"params\":{\"spender_\":\"Account that tokens are approved for.\",\"subtractedAmount_\":\"Amount to decrease approval by.\"},\"returns\":{\"success_\":\"         Boolean indicating whether the operation succeeded.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Function that allows one account to increase the allowance of another account over their tokens.          Emits an {Approval} event.\",\"params\":{\"addedAmount_\":\"Amount to increase approval by.\",\"spender_\":\"Account that tokens are approved for.\"},\"returns\":{\"success_\":\"    Boolean indicating whether the operation succeeded.\"}},\"name()\":{\"details\":\"Returns the name of the token.\",\"returns\":{\"name_\":\"The name of the token.\"}},\"nonces(address)\":{\"details\":\"Returns the nonce for the given owner.\",\"params\":{\"owner_\":\"The address of the owner account.\"},\"returns\":{\"nonce_\":\"The nonce for the given owner.\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Approve by signature.\",\"params\":{\"amount_\":\"Permit approval spend limit.\",\"deadline_\":\"Deadline after which the permit is invalid.\",\"owner_\":\"Owner address that signed the permit.\",\"r_\":\"ECDSA signature r component.\",\"s_\":\"ECDSA signature s component.\",\"spender_\":\"Spender of the permit.\",\"v_\":\"ECDSA signature v component.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token.\",\"returns\":{\"symbol_\":\"The symbol of the token.\"}},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens in existence.\",\"returns\":{\"totalSupply_\":\"The total amount of tokens in existence.\"}},\"transfer(address,uint256)\":{\"details\":\"Moves an amount of tokens from `msg.sender` to a specified account.          Emits a {Transfer} event.\",\"params\":{\"amount_\":\"Amount of tokens that are transferred.\",\"recipient_\":\"Account that receives tokens.\"},\"returns\":{\"success_\":\"  Boolean indicating whether the operation succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a pre-approved amount of tokens from a sender to a specified account.          Emits a {Transfer} event.          Emits an {Approval} event.\",\"params\":{\"amount_\":\"Amount of tokens that are transferred.\",\"owner_\":\"Account that tokens are moving from.\",\"recipient_\":\"Account that receives tokens.\"},\"returns\":{\"success_\":\"  Boolean indicating whether the operation succeeded.\"}}},\"title\":\"Interface of the ERC20 standard as defined in the EIP, including EIP-2612 permit functionality.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"modules/erc20/contracts/interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"modules/erc20/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x3467fb0980a24c1a3ea54093029a9321e316ae22e5d70d6bd961fe6c44f15161\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://47d2e51f1b88b432d1372b2c36fc3dcadcc74f9854bcf1b5bf4f52e0f6418c21\",\"dweb:/ipfs/QmVjadyhNCrEiSpZLQwJefPBwtweaFMZCLp9fDS56QprbP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/interfaces/IERC4626.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IERC4626.sol",
					"exportedSymbols": {
						"IERC20": [
							321
						],
						"IERC4626": [
							167
						]
					},
					"id": 168,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".22",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "42:32:0"
						},
						{
							"absolutePath": "modules/erc20/contracts/interfaces/IERC20.sol",
							"file": "../../modules/erc20/contracts/interfaces/IERC20.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 168,
							"sourceUnit": 322,
							"src": "76:77:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "85:6:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 321,
										"src": "259:6:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "259:6:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "155:82:0",
								"text": "@title A standard for tokenized Vaults with a single underlying ERC-20 token."
							},
							"fullyImplemented": false,
							"id": 167,
							"linearizedBaseContracts": [
								167,
								321
							],
							"name": "IERC4626",
							"nameLocation": "247:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 7,
										"nodeType": "StructuredDocumentation",
										"src": "337:441:0",
										"text": "  @dev   `caller_` has exchanged `assets_` for `shares_` and transferred them to `owner_`.\n         MUST be emitted when assets are deposited via the `deposit` or `mint` methods.\n  @param caller_ The caller of the function that emitted the `Deposit` event.\n  @param owner_  The owner of the shares.\n  @param assets_ The amount of assets deposited.\n  @param shares_ The amount of shares minted."
									},
									"id": 17,
									"name": "Deposit",
									"nameLocation": "789:7:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "caller_",
												"nameLocation": "813:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "797:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "797:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "838:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "822:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 13,
												"indexed": false,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "854:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "846:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 12,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"indexed": false,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "871:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "863:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 14,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "863:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "796:83:0"
									},
									"src": "783:97:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 18,
										"nodeType": "StructuredDocumentation",
										"src": "886:540:0",
										"text": "  @dev   `caller_` has exchanged `shares_`, owned by `owner_`, for `assets_`, and transferred them to `receiver_`.\n         MUST be emitted when assets are withdrawn via the `withdraw` or `redeem` methods.\n  @param caller_   The caller of the function that emitted the `Withdraw` event.\n  @param receiver_ The receiver of the assets.\n  @param owner_    The owner of the shares.\n  @param assets_   The amount of assets withdrawn.\n  @param shares_   The amount of shares burned."
									},
									"id": 30,
									"name": "Withdraw",
									"nameLocation": "1437:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "caller_",
												"nameLocation": "1462:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1446:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1446:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "receiver_",
												"nameLocation": "1487:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1471:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "1514:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1498:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"indexed": false,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "1530:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1522:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 25,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1522:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"indexed": false,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "1547:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1539:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 27,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1539:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1445:110:0"
									},
									"src": "1431:125:0"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "1653:247:0",
										"text": "  @dev    The address of the underlying asset used by the Vault.\n          MUST be a contract that implements the ERC-20 standard.\n          MUST NOT revert.\n  @return asset_ The address of the underlying asset."
									},
									"functionSelector": "38d52e0f",
									"id": 36,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "asset",
									"nameLocation": "1914:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1919:2:0"
									},
									"returnParameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "asset_",
												"nameLocation": "1953:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 36,
												"src": "1945:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 33,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:16:0"
									},
									"scope": 167,
									"src": "1905:56:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 37,
										"nodeType": "StructuredDocumentation",
										"src": "2085:445:0",
										"text": "  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.\n          MUST emit the {Deposit} event.\n          MUST revert if all of the assets cannot be deposited (due to insufficient approval, deposit limits, slippage, etc).\n  @param  assets_   The amount of assets to deposit.\n  @param  receiver_ The receiver of the shares.\n  @return shares_   The amount of shares minted."
									},
									"functionSelector": "6e553f65",
									"id": 46,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "2544:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "2560:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "2552:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2552:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "receiver_",
												"nameLocation": "2577:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "2569:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 40,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2569:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2551:36:0"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "2614:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "2606:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 43,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2606:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2605:17:0"
									},
									"scope": 167,
									"src": "2535:88:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "2629:438:0",
										"text": "  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.\n          MUST emit the {Deposit} event.\n          MUST revert if all of shares cannot be minted (due to insufficient approval, deposit limits, slippage, etc).\n  @param  shares_   The amount of shares to mint.\n  @param  receiver_ The receiver of the shares.\n  @return assets_   The amount of assets deposited."
									},
									"functionSelector": "94bf804d",
									"id": 56,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "3081:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "3094:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 56,
												"src": "3086:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 48,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3086:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "receiver_",
												"nameLocation": "3111:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 56,
												"src": "3103:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3103:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3085:36:0"
									},
									"returnParameters": {
										"id": 55,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 54,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "3148:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 56,
												"src": "3140:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 53,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3140:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3139:17:0"
									},
									"scope": 167,
									"src": "3072:85:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 57,
										"nodeType": "StructuredDocumentation",
										"src": "3163:515:0",
										"text": "  @dev    Burns `shares_` from `owner_` and sends `assets_` to `receiver_`.\n          MUST emit the {Withdraw} event.\n          MUST revert if all of the shares cannot be redeemed (due to insufficient shares, withdrawal limits, slippage, etc).\n  @param  shares_   The amount of shares to redeem.\n  @param  receiver_ The receiver of the assets.\n  @param  owner_    The owner of the shares.\n  @return assets_   The amount of assets sent to the receiver."
									},
									"functionSelector": "ba087652",
									"id": 68,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "redeem",
									"nameLocation": "3692:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "3707:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3699:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3699:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "receiver_",
												"nameLocation": "3724:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3716:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 60,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3716:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "3743:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3735:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3735:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3698:52:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "3777:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3769:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 65,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3769:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3768:17:0"
									},
									"scope": 167,
									"src": "3683:103:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "3792:518:0",
										"text": "  @dev    Burns `shares_` from `owner_` and sends `assets_` to `receiver_`.\n          MUST emit the {Withdraw} event.\n          MUST revert if all of the assets cannot be withdrawn (due to insufficient assets, withdrawal limits, slippage, etc).\n  @param  assets_   The amount of assets to withdraw.\n  @param  receiver_ The receiver of the assets.\n  @param  owner_    The owner of the assets.\n  @return shares_   The amount of shares burned from the owner."
									},
									"functionSelector": "b460af94",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "4324:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "4341:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4333:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4333:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "receiver_",
												"nameLocation": "4358:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4350:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 72,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4350:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "4377:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4369:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 74,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4369:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4332:52:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "4411:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4403:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 77,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4403:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4402:17:0"
									},
									"scope": 167,
									"src": "4315:105:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "4514:515:0",
										"text": "  @dev    The amount of `assets_` the `shares_` are currently equivalent to.\n          MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.\n          MUST NOT show any variations depending on the caller.\n          MUST NOT revert.\n  @param  shares_ The amount of shares to convert.\n  @return assets_ The amount of equivalent assets."
									},
									"functionSelector": "07a2d13a",
									"id": 88,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "convertToAssets",
									"nameLocation": "5043:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "5067:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "5059:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 82,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5059:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5058:17:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "5107:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "5099:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 85,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5099:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5098:17:0"
									},
									"scope": 167,
									"src": "5034:82:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 89,
										"nodeType": "StructuredDocumentation",
										"src": "5122:515:0",
										"text": "  @dev    The amount of `shares_` the `assets_` are currently equivalent to.\n          MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.\n          MUST NOT show any variations depending on the caller.\n          MUST NOT revert.\n  @param  assets_ The amount of assets to convert.\n  @return shares_ The amount of equivalent shares."
									},
									"functionSelector": "c6e6f592",
									"id": 96,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "convertToShares",
									"nameLocation": "5651:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "5675:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "5667:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 90,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5667:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5666:17:0"
									},
									"returnParameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "5715:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "5707:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 93,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5707:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5706:17:0"
									},
									"scope": 167,
									"src": "5642:82:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 97,
										"nodeType": "StructuredDocumentation",
										"src": "5730:415:0",
										"text": "  @dev    Maximum amount of `assets_` that can be deposited on behalf of the `receiver_` through a `deposit` call.\n          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.\n          MUST NOT revert.\n  @param  receiver_ The receiver of the assets.\n  @return assets_   The maximum amount of assets that can be deposited."
									},
									"functionSelector": "402d267d",
									"id": 104,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxDeposit",
									"nameLocation": "6159:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "receiver_",
												"nameLocation": "6178:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "6170:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 98,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6170:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6169:19:0"
									},
									"returnParameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "6220:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "6212:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6212:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6211:17:0"
									},
									"scope": 167,
									"src": "6150:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "6235:406:0",
										"text": "  @dev    Maximum amount of `shares_` that can be minted on behalf of the `receiver_` through a `mint` call.\n          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.\n          MUST NOT revert.\n  @param  receiver_ The receiver of the shares.\n  @return shares_   The maximum amount of shares that can be minted."
									},
									"functionSelector": "c63d75b6",
									"id": 112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxMint",
									"nameLocation": "6655:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "receiver_",
												"nameLocation": "6671:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "6663:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6663:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6662:19:0"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "6713:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "6705:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6705:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6704:17:0"
									},
									"scope": 167,
									"src": "6646:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 113,
										"nodeType": "StructuredDocumentation",
										"src": "6728:413:0",
										"text": "  @dev    Maximum amount of `shares_` that can be redeemed from the `owner_` through a `redeem` call.\n          MUST return a limited value if the owner is subject to any limits, or the total amount of owned shares otherwise.\n          MUST NOT revert.\n  @param  owner_  The owner of the shares.\n  @return shares_ The maximum amount of shares that can be redeemed."
									},
									"functionSelector": "d905777e",
									"id": 120,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxRedeem",
									"nameLocation": "7155:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "7173:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "7165:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7165:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7164:16:0"
									},
									"returnParameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "7212:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "7204:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7204:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7203:17:0"
									},
									"scope": 167,
									"src": "7146:75:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 121,
										"nodeType": "StructuredDocumentation",
										"src": "7227:410:0",
										"text": "  @dev    Maximum amount of `assets_` that can be withdrawn from the `owner_` through a `withdraw` call.\n          MUST return a limited value if the owner is subject to any limits, or the total amount of owned assets otherwise.\n          MUST NOT revert.\n  @param  owner_  The owner of the assets.\n  @return assets_ The maximum amount of assets that can be withdrawn."
									},
									"functionSelector": "ce96cb77",
									"id": 128,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxWithdraw",
									"nameLocation": "7651:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "7671:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "7663:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 122,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7663:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7662:16:0"
									},
									"returnParameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "7710:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "7702:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7702:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7701:17:0"
									},
									"scope": 167,
									"src": "7642:77:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "7725:622:0",
										"text": "  @dev    Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.\n          MUST return as close to and no more than the exact amount of shares that would be minted in a `deposit` call in the same transaction.\n          MUST NOT account for deposit limits like those returned from `maxDeposit` and should always act as though the deposit would be accepted.\n          MUST NOT revert.\n  @param  assets_ The amount of assets to deposit.\n  @return shares_ The amount of shares that would be minted."
									},
									"functionSelector": "ef8b30f7",
									"id": 136,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewDeposit",
									"nameLocation": "8361:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "8384:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "8376:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8376:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8375:17:0"
									},
									"returnParameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "8424:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "8416:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8416:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8415:17:0"
									},
									"scope": 167,
									"src": "8352:81:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 137,
										"nodeType": "StructuredDocumentation",
										"src": "8439:614:0",
										"text": "  @dev    Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions.\n          MUST return as close to and no fewer than the exact amount of assets that would be deposited in a `mint` call in the same transaction.\n          MUST NOT account for mint limits like those returned from `maxMint` and should always act as though the minting would be accepted.\n          MUST NOT revert.\n  @param  shares_ The amount of shares to mint.\n  @return assets_ The amount of assets that would be deposited."
									},
									"functionSelector": "b3d7f6b9",
									"id": 144,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewMint",
									"nameLocation": "9067:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "9087:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "9079:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 138,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9079:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9078:17:0"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "9127:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "9119:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9119:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9118:17:0"
									},
									"scope": 167,
									"src": "9058:78:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 145,
										"nodeType": "StructuredDocumentation",
										"src": "9142:636:0",
										"text": "  @dev    Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block, given current on-chain conditions.\n          MUST return as close to and no more than the exact amount of assets that would be withdrawn in a `redeem` call in the same transaction.\n          MUST NOT account for redemption limits like those returned from `maxRedeem` and should always act as though the redemption would be accepted.\n          MUST NOT revert.\n  @param  shares_ The amount of shares to redeem.\n  @return assets_ The amount of assets that would be withdrawn."
									},
									"functionSelector": "4cdad506",
									"id": 152,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewRedeem",
									"nameLocation": "9792:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "9814:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 152,
												"src": "9806:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9806:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9805:17:0"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "9854:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 152,
												"src": "9846:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9846:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9845:17:0"
									},
									"scope": 167,
									"src": "9783:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 153,
										"nodeType": "StructuredDocumentation",
										"src": "9869:639:0",
										"text": "  @dev    Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions.\n          MUST return as close to and no fewer than the exact amount of shares that would be burned in a `withdraw` call in the same transaction.\n          MUST NOT account for withdrawal limits like those returned from `maxWithdraw` and should always act as though the withdrawal would be accepted.\n          MUST NOT revert.\n  @param  assets_ The amount of assets to withdraw.\n  @return shares_ The amount of shares that would be redeemed."
									},
									"functionSelector": "0a28a477",
									"id": 160,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewWithdraw",
									"nameLocation": "10522:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "assets_",
												"nameLocation": "10546:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "10538:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10538:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10537:17:0"
									},
									"returnParameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "shares_",
												"nameLocation": "10586:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "10578:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10578:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10577:17:0"
									},
									"scope": 167,
									"src": "10513:82:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 161,
										"nodeType": "StructuredDocumentation",
										"src": "10601:274:0",
										"text": "  @dev    Total amount of the underlying asset that is managed by the Vault.\n          SHOULD include compounding that occurs from any yields.\n          MUST NOT revert.\n  @return totalAssets_ The total amount of assets the Vault manages."
									},
									"functionSelector": "01e1d114",
									"id": 166,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalAssets",
									"nameLocation": "10889:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10900:2:0"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "totalAssets_",
												"nameLocation": "10934:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "10926:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10926:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10925:22:0"
									},
									"scope": 167,
									"src": "10880:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 168,
							"src": "237:10714:0",
							"usedErrors": []
						}
					],
					"src": "42:10910:0"
				},
				"id": 0
			},
			"modules/erc20/contracts/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "modules/erc20/contracts/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							321
						]
					},
					"id": 322,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 169,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".22",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "42:32:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 170,
								"nodeType": "StructuredDocumentation",
								"src": "76:107:1",
								"text": "@title Interface of the ERC20 standard as defined in the EIP, including EIP-2612 permit functionality."
							},
							"fullyImplemented": false,
							"id": 321,
							"linearizedBaseContracts": [
								321
							],
							"name": "IERC20",
							"nameLocation": "193:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "271:302:1",
										"text": "  @dev   Emitted when one account has set the allowance of another account over their tokens.\n  @param owner_   Account that tokens are approved from.\n  @param spender_ Account that tokens are approved for.\n  @param amount_  Amount of tokens that have been approved."
									},
									"id": 179,
									"name": "Approval",
									"nameLocation": "584:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "609:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "593:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 172,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "593:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender_",
												"nameLocation": "633:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "617:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "617:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "651:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "643:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "643:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "592:67:1"
									},
									"src": "578:82:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 180,
										"nodeType": "StructuredDocumentation",
										"src": "666:281:1",
										"text": "  @dev   Emitted when tokens have moved from one account to another.\n  @param owner_     Account that tokens have moved from.\n  @param recipient_ Account that tokens have moved to.\n  @param amount_    Amount of tokens that have been transferred."
									},
									"id": 188,
									"name": "Transfer",
									"nameLocation": "958:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 182,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "983:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "967:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "967:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient_",
												"nameLocation": "1007:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "991:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "991:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "1027:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1019:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1019:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "966:69:1"
									},
									"src": "952:84:1"
								},
								{
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "1142:369:1",
										"text": "  @dev    Function that allows one account to set the allowance of another account over their tokens.\n          Emits an {Approval} event.\n  @param  spender_ Account that tokens are approved for.\n  @param  amount_  Amount of tokens that have been approved.\n  @return success_ Boolean indicating whether the operation succeeded."
									},
									"functionSelector": "095ea7b3",
									"id": 198,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "1525:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "spender_",
												"nameLocation": "1541:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 198,
												"src": "1533:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 190,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1533:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "1559:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 198,
												"src": "1551:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1551:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1532:35:1"
									},
									"returnParameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "success_",
												"nameLocation": "1591:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 198,
												"src": "1586:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 195,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1586:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1585:15:1"
									},
									"scope": 321,
									"src": "1516:85:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 199,
										"nodeType": "StructuredDocumentation",
										"src": "1607:391:1",
										"text": "  @dev    Function that allows one account to decrease the allowance of another account over their tokens.\n          Emits an {Approval} event.\n  @param  spender_          Account that tokens are approved for.\n  @param  subtractedAmount_ Amount to decrease approval by.\n  @return success_          Boolean indicating whether the operation succeeded."
									},
									"functionSelector": "a457c2d7",
									"id": 208,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "2012:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "spender_",
												"nameLocation": "2038:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "2030:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 200,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2030:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "subtractedAmount_",
												"nameLocation": "2056:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "2048:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 202,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2048:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2029:45:1"
									},
									"returnParameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "success_",
												"nameLocation": "2098:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "2093:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 205,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2093:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2092:15:1"
									},
									"scope": 321,
									"src": "2003:105:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "2114:376:1",
										"text": "  @dev    Function that allows one account to increase the allowance of another account over their tokens.\n          Emits an {Approval} event.\n  @param  spender_     Account that tokens are approved for.\n  @param  addedAmount_ Amount to increase approval by.\n  @return success_     Boolean indicating whether the operation succeeded."
									},
									"functionSelector": "39509351",
									"id": 218,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "2504:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "spender_",
												"nameLocation": "2530:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 218,
												"src": "2522:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2522:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "addedAmount_",
												"nameLocation": "2548:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 218,
												"src": "2540:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2540:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2521:40:1"
									},
									"returnParameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "success_",
												"nameLocation": "2585:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 218,
												"src": "2580:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 215,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2580:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2579:15:1"
									},
									"scope": 321,
									"src": "2495:100:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 219,
										"nodeType": "StructuredDocumentation",
										"src": "2601:444:1",
										"text": "  @dev   Approve by signature.\n  @param owner_    Owner address that signed the permit.\n  @param spender_  Spender of the permit.\n  @param amount_   Permit approval spend limit.\n  @param deadline_ Deadline after which the permit is invalid.\n  @param v_        ECDSA signature v component.\n  @param r_        ECDSA signature r component.\n  @param s_        ECDSA signature s component."
									},
									"functionSelector": "d505accf",
									"id": 236,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3059:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "3074:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3066:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 220,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3066:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "spender_",
												"nameLocation": "3090:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3082:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "3105:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3100:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 224,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3100:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "deadline_",
												"nameLocation": "3119:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3114:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 226,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3114:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "v_",
												"nameLocation": "3136:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3130:8:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 228,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3130:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "r_",
												"nameLocation": "3148:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3140:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 230,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3140:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "s_",
												"nameLocation": "3160:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3152:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 232,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3152:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3065:98:1"
									},
									"returnParameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3172:0:1"
									},
									"scope": 321,
									"src": "3050:123:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "3179:339:1",
										"text": "  @dev    Moves an amount of tokens from `msg.sender` to a specified account.\n          Emits a {Transfer} event.\n  @param  recipient_ Account that receives tokens.\n  @param  amount_    Amount of tokens that are transferred.\n  @return success_   Boolean indicating whether the operation succeeded."
									},
									"functionSelector": "a9059cbb",
									"id": 246,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3532:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "recipient_",
												"nameLocation": "3549:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3541:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3541:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "3569:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3561:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3561:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:37:1"
									},
									"returnParameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "success_",
												"nameLocation": "3601:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3596:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 243,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3596:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3595:15:1"
									},
									"scope": 321,
									"src": "3523:88:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 247,
										"nodeType": "StructuredDocumentation",
										"src": "3617:454:1",
										"text": "  @dev    Moves a pre-approved amount of tokens from a sender to a specified account.\n          Emits a {Transfer} event.\n          Emits an {Approval} event.\n  @param  owner_     Account that tokens are moving from.\n  @param  recipient_ Account that receives tokens.\n  @param  amount_    Amount of tokens that are transferred.\n  @return success_   Boolean indicating whether the operation succeeded."
									},
									"functionSelector": "23b872dd",
									"id": 258,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4085:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "4106:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "4098:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 248,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4098:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 251,
												"mutability": "mutable",
												"name": "recipient_",
												"nameLocation": "4122:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "4114:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 250,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4114:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "4142:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "4134:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4134:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4097:53:1"
									},
									"returnParameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "success_",
												"nameLocation": "4174:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "4169:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 255,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4169:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4168:15:1"
									},
									"scope": 321,
									"src": "4076:108:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 259,
										"nodeType": "StructuredDocumentation",
										"src": "4278:325:1",
										"text": "  @dev    Returns the allowance that one account has given another over their tokens.\n  @param  owner_     Account that tokens are approved from.\n  @param  spender_   Account that tokens are approved for.\n  @return allowance_ Allowance that one account has given another over their tokens."
									},
									"functionSelector": "dd62ed3e",
									"id": 268,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4617:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "4635:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "4627:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4627:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "spender_",
												"nameLocation": "4651:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "4643:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4643:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4626:34:1"
									},
									"returnParameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "allowance_",
												"nameLocation": "4692:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "4684:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4684:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4683:20:1"
									},
									"scope": 321,
									"src": "4608:96:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 269,
										"nodeType": "StructuredDocumentation",
										"src": "4710:205:1",
										"text": "  @dev    Returns the amount of tokens owned by a given account.\n  @param  account_ Account that owns the tokens.\n  @return balance_ Amount of tokens owned by a given account."
									},
									"functionSelector": "70a08231",
									"id": 276,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "4929:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "account_",
												"nameLocation": "4947:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "4939:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 270,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4939:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4938:18:1"
									},
									"returnParameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "balance_",
												"nameLocation": "4988:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "4980:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4980:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4979:18:1"
									},
									"scope": 321,
									"src": "4920:78:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "5004:143:1",
										"text": "  @dev    Returns the decimal precision used by the token.\n  @return decimals_ The decimal precision used by the token."
									},
									"functionSelector": "313ce567",
									"id": 282,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "5161:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5169:2:1"
									},
									"returnParameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 280,
												"mutability": "mutable",
												"name": "decimals_",
												"nameLocation": "5201:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "5195:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 279,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5195:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5194:17:1"
									},
									"scope": 321,
									"src": "5152:60:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 283,
										"nodeType": "StructuredDocumentation",
										"src": "5218:132:1",
										"text": "  @dev    Returns the signature domain separator.\n  @return domainSeparator_ The signature domain separator."
									},
									"functionSelector": "3644e515",
									"id": 288,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "5364:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5380:2:1"
									},
									"returnParameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "domainSeparator_",
												"nameLocation": "5414:16:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "5406:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 285,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5406:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5405:26:1"
									},
									"scope": 321,
									"src": "5355:77:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 289,
										"nodeType": "StructuredDocumentation",
										"src": "5438:103:1",
										"text": "  @dev    Returns the name of the token.\n  @return name_ The name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 294,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "5555:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5559:2:1"
									},
									"returnParameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "5599:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "5585:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 291,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5585:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5584:21:1"
									},
									"scope": 321,
									"src": "5546:60:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 295,
										"nodeType": "StructuredDocumentation",
										"src": "5612:181:1",
										"text": "  @dev    Returns the nonce for the given owner.\n  @param  owner_  The address of the owner account.\n  @return nonce_ The nonce for the given owner."
									},
									"functionSelector": "7ecebe00",
									"id": 302,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "5807:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 297,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "5822:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "5814:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 296,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5814:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5813:16:1"
									},
									"returnParameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "nonce_",
												"nameLocation": "5861:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "5853:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5853:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5852:16:1"
									},
									"scope": 321,
									"src": "5798:71:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "5875:111:1",
										"text": "  @dev    Returns the permit type hash.\n  @return permitTypehash_ The permit type hash."
									},
									"functionSelector": "30adf81f",
									"id": 308,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "6000:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6015:2:1"
									},
									"returnParameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "permitTypehash_",
												"nameLocation": "6049:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "6041:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 305,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6041:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6040:25:1"
									},
									"scope": 321,
									"src": "5991:75:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 309,
										"nodeType": "StructuredDocumentation",
										"src": "6072:109:1",
										"text": "  @dev    Returns the symbol of the token.\n  @return symbol_ The symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 314,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "6195:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6201:2:1"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "6241:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "6227:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 311,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6227:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6226:23:1"
									},
									"scope": 321,
									"src": "6186:64:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 315,
										"nodeType": "StructuredDocumentation",
										"src": "6256:146:1",
										"text": "  @dev    Returns the total amount of tokens in existence.\n  @return totalSupply_ The total amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 320,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "6416:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6427:2:1"
									},
									"returnParameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "totalSupply_",
												"nameLocation": "6461:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "6453:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6453:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6452:22:1"
									},
									"scope": 321,
									"src": "6407:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 322,
							"src": "183:6295:1",
							"usedErrors": []
						}
					],
					"src": "42:6437:1"
				},
				"id": 1
			}
		}
	}
}